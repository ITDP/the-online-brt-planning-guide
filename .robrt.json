{
	"prepare" : {
		"dockerfile" : {
			"type" : "path",
			"data" : ".robrt.Dockerfile"
		}
	},
	"build" : {
		"cmds" : [
			"export DOCKER_HOST_IP=$(route -n | awk '/UG[ \t]/{print $2}')",
			"env",
			"node --version",

			"cd $ROBRT_REPOSITORY_DIR/generator",
			"cp docs/fakesudo.sh /usr/bin/sudo",
			"add-apt-repository -y ppa:haxe/snapshots",
			"apt-get update",
			"apt-get install -y haxe neko",
			"haxelib setup /usr/share/haxe/lib",
			"haxelib --global install hmm",
			"haxelib --global run hmm setup",
			"haxelib --global list",
			"hmm install",
			"haxelib list",
			"haxe -D travis build.hxml",
			"npm pack",
			"npm install -g manu*.tgz",
			"manu unit-tests",
			"mkdir -p $ROBRT_OUTPUT_DIR/bin",
			"cp manu*.tgz $ROBRT_OUTPUT_DIR/bin/",

			"cd $ROBRT_REPOSITORY_DIR",
			"if [ -z ${NO_CAP_GH_TOKEN+x} ]; then echo Skipped; else git remote set-url origin https://$NO_CAP_GH_TOKEN:$NO_CAP_GH_TOKEN@github.com/ITDP/the-online-brt-planning-guide; fi",
			"git lfs pull 2>&1 | tee .lfs-pull.log || echo \"error exit code: $?\" >> .lfs-pull.log",
			"git lfs logs last 2>&1 | tee .lfs-logs-last.log",
			"grep -qi 'no logs to show' .lfs-logs-last.log",
			"! grep -qi 'error\\|\\(batch response\\)' .lfs-pull.log",

			"cd $ROBRT_REPOSITORY_DIR",
			"cp LICENSE.md $ROBRT_OUTPUT_DIR/",
			"export DEBUG=1",
			"export TEX_NO_POSITIONS=1",
			"favicon=grey",
			"if [ \"${FORCE_GREY_FAVICON}\" -eq 1 ]; then echo Skipped; elif [ \"${ROBRT_IS_PR}\" -eq 1 ]; then favicon=red; elif [ \"${ROBRT_HEAD}\" = master ]; then favicon=green; fi",
			"cp guide/{itdp_$favicon,favicon}.ico",
			"manu generate guide/index.manu .generated",
			"find guide -type f -iname '*.manu' -print0 | xargs -0 manu stat tokens",

			"cd $ROBRT_REPOSITORY_DIR",
			"if [ -z ${ASSET_URL_PREFIX+x} ]; then echo Skipped; else manu asset-server store $DOCKER_HOST_IP 6668 .generated/html/assets; fi",
			"if [ -z ${ASSET_URL_PREFIX+x} ]; then echo Skipped; else rm -rf .generated/html/assets; fi",
			"cp -r .generated/html $ROBRT_OUTPUT_DIR/guide",
			"unset DEBUG",

			"tags='$(git tag)' max='' if [[ $IS_PR -eq 1 ]] then for t in $tags; do if [[ '$t' =~ ^[v\\d\\.\\d] && '$max' < '$t' ]] then max=$t; fi done fi export TAG=$max",

			"cd $ROBRT_REPOSITORY_DIR/server/cover",
			"hmm install",
			"haxelib list",
			"haxe build.hxml",

			"cd $ROBRT_REPOSITORY_DIR",
			"node server/cover/bin/cover-generator.js .generated/html/table-of-contents.html server/cover/data server/cover/ready/html",
			"cp -r server/cover/ready/html $ROBRT_OUTPUT_DIR/cover",

			"cd $ROBRT_REPOSITORY_DIR",
			"mkdir -p $ROBRT_OUTPUT_DIR/search",
			"cp server/search/search $ROBRT_OUTPUT_DIR/search/index.html",

			"cd $ROBRT_REPOSITORY_DIR",
			"ls -l .generated/pdf/fonts",
			"server/compress-pdf-assets.sh .generated/pdf 150",
			"cd .generated/pdf/",
			"latexmk -lualatex -pdflatex='lualatex -interaction=nonstopmode' book.tex",
			"mkdir -p $ROBRT_OUTPUT_DIR/pdf $ROBRT_OUTPUT_DIR/guide/pdf",
			"cp book.pdf $ROBRT_OUTPUT_DIR/guide/pdf/the-brt-planning-guide.pdf",
			"cp book.log $ROBRT_OUTPUT_DIR/pdf/guide_lualatex.log"
		]
	}
}

