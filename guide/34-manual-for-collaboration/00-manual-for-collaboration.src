\chapter{Manual to collaboration}

Newcomers to git

Git is a computer program \[ideally\] to be installed on a contributor's computer, where it shall manage a copy (clone) of 
the required content to produce the BRT Planning Guide (this repository) and submit proposals for changes.
Git is originally a command line tool, but there are several graphic tools. It may require a two hour effort to 
install it and learn the basics of using it without assistance and 20 minutes with assistance.
More about git in the Pro Git book (https://git-scm.com/book/en/v2).

Github is a website that hosts repositories like this one, where contribution from several people can be centralized,
its use is free for open-source projects. Contributors to the BRT Planning Guide are required to have a github account,
with that only it is possible to submit changes proposals to the guide, although it is not practical for large ones.

To simply navigate through folders and files make sure you click on the file name (in light blue on the left side)
and NOT in the gray message in the middle of the same container (that will lead you to the last changes on the file)

Files structure

Generator directory holds code files that will process the content in the Guide directory,
which contains the source (text files and assets as images referenced in the text files) for the BRT Planning Guide,
the dot files have configuration information
(describing where and how processing the repository must take place and about git itself).

The content in the guide

At the moment, the entry point of processing is in the file guide/the-guide.src,
where other files are pointed with the \code!\include{point/to/other/file.src}! command.
A user manual on how to contribute and of the supported syntax is being developed in the chapter
called Manual for Collaboration.



\section{Getting started}

To do...



\section{Basic text}

Simple, continuous text is the most basic and essential element, and can *usually* be simply typed in the source files.

Paragraphs can be split into several lines for improved readibility.
Instead, paragraphs end at blank lines, or more specificaly, visibly empty lines.

\codeblock\end
This is the first paragraph.
This previous line break didn't end this paragraph.

Now *this* is a new paragraph, because of the
previous empty line.
\end

\subsection{Reserved characters and escaping}

The most important character with special meaning is the backslash (\code!\!).
It's used to indicate with instructions are special commands (like the \code!\item! command), and to use special characters like normal characters.

The backslash itself can be typed as regular text, as in ``a \\ backslash'', by typing \code!a \\ backslash!.
By preceding any special character, such as the backslash itself, with another backslash, we indicate that we want that otherwise special character to appear in the output; this is called escaping.

\subsection{Paragraphs}

To do...

\subsection{Math and equations}

To do...

\subsection{Comments and annotations}

To do...

\subsection{Code}

To do...




\section{Content hierarchy}

To do...

\subsection{Organizing the sources}

To do...



\section{Other visual elements}

To do...

\subsection{Boxes}

To do...

\subsection{Figures}

To do...

\subsection{Tables}

To do...

\subsection{Equation blocks}

To do...

\subsection{Code blocks}

To do...

\section{Formal specification}

To do...

