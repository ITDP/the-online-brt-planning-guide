-lib hxparse
-lib assertion
-lib literals
-lib sys-utils
-lib version
-cp include
-cp src

--each

# The main tool, to run on Node
# use --debug for source-map generation
-main Main
-js bin/obrt.js
-lib hxnodejs
-debug

--next

# A stat tool, to run on Node
# use --debug for source-map generation
-main tools.Stats
-js bin/obrt-stats.js
-lib hxnodejs
-debug

--next

# The Node unit tests
# use --debug for source-map generation
-main RunTests
-js bin/tests.js
-cp test
-lib utest
# use a pseudo fs library
-cp pseudo
# don't load hxnodejs, but emulate it been loaded
-D hxnodejs
--macro allowPackage("sys")
-debug

--next

# Alternate tool target: Neko
# This much easier to debug; it's is also much slower
-main Main
-neko bin/obrt.n
-cmd nekotools boot bin/obrt.n

--next

# The Neko unit tests
-main RunTests
-neko bin/tests.n
-cp test
-lib utest
# use a pseudo fs library
-cp pseudo

# --next
#
# -main Main
# -cpp bin/cpp/obrt
#
# --next
#
# -main cpp.cppia.Host
# -cpp bin/cppia
# -lib utest
# -D scriptable
# -dce no
# -debug
# -D analyzer
#
# --next
#
# -main RunTests
# -cppia bin/cppia/tests.cppia
# -cp test
# -cp pseudo
# -lib utest
# -debug
# -D analyzer
#
# --next
#
# -main RunTests
# -cpp bin/cpp/tests
# -cp test
# -lib utest
# -cp pseudo

